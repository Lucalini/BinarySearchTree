import unittest
from binary_search_tree import *

class TestLab5(unittest.TestCase):

    # Trivial Test
    def test_simple(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        self.assertEqual(bst.inorder_list(), [])
        bst.insert(10, 'stuff')
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, 'stuff'))
        bst.insert(10, 'other')
        self.assertEqual(bst.find_max(), (10, 'other'))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])
    def test_height(self):
        bst = BinarySearchTree()
        bst.insert(5, "1")
        bst.insert(8, "3")
        self.assertEqual(bst.tree_height(), 1)
        bst.insert(6, "2")
        self.assertEqual(bst.tree_height(), 2)
        bst.insert(6, "2")
        self.assertEqual(bst.tree_height(), 2)
        bst.insert(9, "1")
        bst.insert(10, "2")
        bst.insert(11, "2")
        self.assertEqual(bst.tree_height(), 4)
    def test_height2(self):
        bst = BinarySearchTree()
        self.assertEqual(bst.tree_height(), None)
        bst.insert(5, "1")
        self.assertEqual(bst.tree_height(), 0)
        bst.insert(8, "3")
        bst.insert(6, "4")
        bst.insert(5, "200")
        bst.insert(9, "1")
        bst.insert(12, "3")
        bst.insert(16, "4")
        bst.insert(2, "200")
        bst.insert(1, "200")
        self.assertEqual(bst.tree_height(), 4)
        bst.insert(-5, "1")
        bst.insert(-6, "1")
        bst.insert(-7, "1")
        self.assertEqual(bst.level_order_list(), [5,2,8,1,6,9,-5,12,-6, 16,-7])
        self.assertEqual(bst.tree_height(), 5)
    def test_min_max(self):
        bst = BinarySearchTree()
        bst.insert(5, "1")
        bst.insert(8, "3")
        bst.insert(6, "4")
        bst.insert(5, "200")
        self.assertEqual(bst.find_min(), (5,"200"))
        self.assertEqual(bst.find_max(), (8,"3"))
        bst.insert(9, "1")
        bst.insert(12, "3")
        bst.insert(16, "4")
        bst.insert(2, "200")
        bst.insert(1, "200")
        self.assertEqual(bst.find_max(), (16,"4"))
        self.assertEqual(bst.find_min(), (1,"200"))


    def test_min_max_empty(self):
        bst = BinarySearchTree()
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.find_max(), None)

    def test_preorder(self):
        bst = BinarySearchTree()
        bst.insert(5, "5")
        bst.insert(8, "8")
        bst.insert(6, '6')
        bst.insert(4, "4")
        bst.insert(3, "3")
        bst.insert(7, "7")
        bst.insert(9, "9")
        bst.insert(10, "10")
        self.assertEqual(bst.preorder_list(), [5,4,3,8,6,7,9,10])
    def test_levelorder(self):
        bst = BinarySearchTree()
        self.assertEqual(bst.level_order_list(), [])
        bst.insert(5, "5")
        bst.insert(8, "8")
        bst.insert(6, '6')
        bst.insert(4, "4")
        bst.insert(3, "3")
        bst.insert(7, "7")
        bst.insert(9, "9")
        bst.insert(10, "10")
        self.assertEqual(bst.level_order_list(), [5,4,8,3,6,9,7,10])
        bst.insert(4.5, "5.5")
        bst.insert(2, "2")
        self.assertEqual(bst.level_order_list(), [5,4,8,3,4.5,6,9,2,7,10])
    def test_inorder(self):
        bst = BinarySearchTree()
        bst.insert(5, "5")
        bst.insert(8, "8")
        bst.insert(6, '6')
        bst.insert(4, "4")
        bst.insert(3, "3")
        bst.insert(7, "7")
        bst.insert(9, "9")
        bst.insert(10, "10")
        self.assertEqual(bst.inorder_list(), [3,4,5,6,7,8,9,10])
    def test_search(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.search(3))
        bst.insert(3, "3")
        bst.insert(7, "7")
        bst.insert(9, "9")
        self.assertFalse(bst.search(1))
        self.assertTrue(bst.search(7))
        bst.insert(5, "5")
        bst.insert(8, "8")
        bst.insert(6, '6')
        bst.insert(4, "4")
        bst.insert(10, "10")
        self.assertTrue(bst.search(10))
        self.assertTrue(bst.search(6))
        self.assertTrue(bst.search(4))
        self.assertTrue(bst.search(8))
        self.assertTrue(bst.search(5))

    def test_empty_tree(self):
        bst = BinarySearchTree()
        self.assertTrue(bst.is_empty())
        self.assertEqual(bst.find_min(), None)
        self.assertEqual(bst.find_max(), None)
        self.assertEqual(bst.tree_height(), None)
        self.assertEqual(bst.inorder_list(), [])
        self.assertEqual(bst.preorder_list(), [])
        self.assertEqual(bst.level_order_list(), [])

    def test_insert_and_search(self):
        bst = BinarySearchTree()
        self.assertFalse(bst.search(10))

        bst.insert(10, "data_10")
        self.assertTrue(bst.search(10))
        self.assertEqual(bst.find_min(), (10, "data_10"))
        self.assertEqual(bst.find_max(), (10, "data_10"))
        self.assertEqual(bst.tree_height(), 0)
        self.assertEqual(bst.inorder_list(), [10])
        self.assertEqual(bst.preorder_list(), [10])
        self.assertEqual(bst.level_order_list(), [10])

        bst.insert(5, "data_5")
        bst.insert(15, "data_15")
        bst.insert(3, "data_3")
        bst.insert(7, "data_7")
        bst.insert(12, "data_12")
        bst.insert(18, "data_18")

        self.assertTrue(bst.search(15))
        self.assertTrue(bst.search(3))
        self.assertTrue(bst.search(18))
        self.assertFalse(bst.search(9))
        self.assertEqual(bst.find_min(), (3, "data_3"))
        self.assertEqual(bst.find_max(), (18, "data_18"))
        self.assertEqual(bst.tree_height(), 2)
        self.assertEqual(bst.inorder_list(), [3, 5, 7, 10, 12, 15, 18])
        self.assertEqual(bst.preorder_list(), [10, 5, 3, 7, 15, 12, 18])
        self.assertEqual(bst.level_order_list(), [10, 5, 15, 3, 7, 12, 18])

    def test_replace_data(self):
        bst = BinarySearchTree()
        bst.insert(10, "data_10")
        bst.insert(5, "data_5")

        self.assertEqual(bst.find_min(), (5, "data_5"))
        self.assertEqual(bst.find_max(), (10, "data_10"))

        bst.insert(5, "new_data_5")
        self.assertEqual(bst.find_min(), (5, "new_data_5"))

    def test_negative_values(self):
        bst = BinarySearchTree()
        bst.insert(-5, "data_-5")
        bst.insert(-10, "data_-10")

        self.assertTrue(bst.search(-5))
        self.assertTrue(bst.search(-10))
        self.assertEqual(bst.find_min(), (-10, "data_-10"))
        self.assertEqual(bst.find_max(), (-5, "data_-5"))

if __name__ == '__main__': 
    unittest.main()
